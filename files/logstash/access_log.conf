input {
        file {
                path => "/data1/logs/nginx/access.log"
                type => nginx
                format => json_event
        }
}

filter {

    ruby {
        init => "@kname = ['request_time','upstream_response_time','remote_addr','request_length','upstream_addr','time_local','host','request','status','bytes_sent','http_referer','http_user_agent','gzip_ratio','http_x_forworded_for','server_addr','server_port','cookie_aQQ_ajkguid','sent_http_ajk']"
        code => "event.append(Hash[@kname.zip(event['message'].split(/\t/))])"
        remove_field => ['@version','message']
    }


    ruby {
        code => "event.cancel if 5 * 24 * 3600 < (event['@timestamp']-::Time.now).abs"
    }

    if [request] {
        ruby {
            init => "@kname = ['method','uri','verb']"
            code => "event.append(Hash[@kname.zip(event['request'].split(' '))])"
        }
        if [uri] {
            ruby {
                init => "@kname = ['url_path1','url_args']"
                code => "event.append(Hash[@kname.zip(event['request'].split('?'))])"
            }
        }
        if [http_x_forworded_for] =~ "\." {
            ruby {
                init => "@kname = ['xff1','xff2','xff3']"
                code => "event.append(Hash[@kname.zip(event['http_x_forworded_for'].split('.'))])"
            }
            if [xff1]{
                ruby {
                    code => "event['xff'] = event['xff1']+ '.' +event['xff2']+ '.' +event['xff3']+ '.*' "
                }
            }
        }
        if [url_path1] {
            ruby {
                init => "@kname = ['url_path']"
                code => "event.append(Hash[@kname.zip(event['url_path1'].split(' HTTP/1.'))])"
            }
        }
        if [url_path] =~ "\/rent\/F" {
           ruby {
               code => "event['url_path_reg'] = '/rent/F'"
           }
        }elseif [url_path] {
           ruby {
               init => "@kname = ['url_path_reg1','url_path_reg2','url_path_reg3']"
               code => "event.append(Hash[@kname.zip(event['url_path'].split('/'))])"
           }
            if [url_path_reg3]{
                ruby {
                    code => "event['url_path_reg'] = '/'+ event['url_path_reg2']+ '/' +event['url_path_reg3']"
                }
            }elseif [url_path_reg2] {
                ruby {
                    code => "event['url_path_reg'] = '/' + event['url_path_reg2']+ '/'"
                }
            }else{
                ruby {
                    code => "event['url_path_reg'] =  '/'"
                }
            }
        }

    }

    mutate {
        convert => ["request_time", "float"]
        convert => ["upstream_response_time", "float"]
        convert => ["request_length", "integer"]
        convert => ["status", "integer"]
        convert => ["bytes_sent", "integer"]
        convert => ["server_port", "integer"]
        update => ["host","%{host[1]}"]
        remove_field => ["type","url_args","uri","url_path1","url_path_reg1","url_path_reg2","url_path_reg3","xff1","xff2","xff3"]
        add_field => ["date","%{+YYYY.MM.dd}"]
       }
}


output {
  elasticsearch {
    host => "10.10.9.103"
    port => 9200
    protocol => "http"
    index => "logstash-user-accesslog"
    flush_size => 5000
    workers => 128
    codec => json {
    }
  }
}
